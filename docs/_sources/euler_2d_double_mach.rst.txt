2D Euler Double Mach Reflection
===============================

<<<<<<< HEAD
This problem solves the *2D conservative Euler equations*. The gas dynamics is governed by a system of PDE

.. math::

   \frac{\partial }{\partial t} \begin{bmatrix}\rho \\ \rho u_x \\ \rho u_y\\ \rho E \end{bmatrix} + \frac{\partial }{\partial x} \begin{bmatrix}\rho u_x \\ \rho u_x^2 +p \\ \rho u_x u_y \\ (E+p)u_x \end{bmatrix} \frac{\partial }{\partial y} \begin{bmatrix}\rho u_y  \\ \rho u_x u_y \\ \rho u_y^2 +p \\ (E+p)u_y \end{bmatrix}= 0

where the pressure :math:`p` is related to the conserved quantities through the equation of the state

.. math::

   p=(\gamma -1)(E-\frac{1}{2}\rho (u_x^2 + u_y^2)).

- The problem is adopted from `this paper <http://flash.uchicago.edu/site/flashcode/user_support/flash_ug_devel/node184.html#SECTION010116000000000000000>`_

- Initial condition is a Mach 10 shock in air tilted by an angle, see reference paper above.

- Domain is :math:`[0, 4]\times[0, 1]`. For BC see link above.

=======
This problem solves the *2D conservative Euler equations*.

- The problem is adopted from `this paper <http://flash.uchicago.edu/site/flashcode/user_support/flash_ug_devel/node184.html#SECTION010116000000000000000>`_

- Initial condition is a Mach 10 shock in air tilted by an angle, see reference paper above.

- Domain is :math:`[0, 4]\times[0, 1]`. For BC see link above.

>>>>>>> cdd90a7b7ed9fb5a4ae7fb40b4ca9318198d3069
- Typically, integration is performed for :math:`t \in (0, 0.25)`.


.. Caution::
   Currently, this problem only works for first order and Weno3 inviscid flux reconstruction.


Mesh
----

.. code-block:: shell

   python3 pressio-demoapps/meshing_scripts/create_full_mesh_for.py \
           --problem doublemach2d_s{3,5} -n Nx Ny --outDir <destination-path>

where ``Nx, Ny`` are the number of cells you want along :math:`x` and :math:`y` respectively, and ``<stencilSize> = 3 or 5 or 7``,
and ``<destination-path>`` is where you want the mesh files to be generated.


C++ synopsis
------------

.. code-block:: c++

   #include "pressiodemoapps/euler2d.hpp"
   // ...
   namespace pda     = pressiodemoapps;
   const auto probId = pda::Euler2d::DoubleMachReflection;
   const auto scheme = pda::InviscidFluxReconstruction::FirstOder; //or Weno3
   auto problem      = pda::create_problem_eigen(meshObj, probId, scheme);
   auto state	     = problem.initialCondition();

Python synopsis
---------------

.. code-block:: py

   import pressiodemoapps as pda
   # ...
   probId  = pda.Euler2d.DoubleMachReflection
   scheme  = pda.InviscidFluxReconstruction.FirstOrder # or Weno3
   problem = pda.create_problem(meshObj, probId, scheme)
   state   = problem.initialCondition()


Sample Plot
-----------

Representative *density* plot at :math:`t=0.25` using a ``600x150`` mesh with Weno3
and SSPRK3 time integration:

.. image:: ../../figures/wiki_2d_dmr_density.png
  :width: 80 %
  :alt: Alternative text
  :align: center
