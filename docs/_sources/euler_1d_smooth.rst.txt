1D Euler Smooth
===============

<<<<<<< HEAD
This problem solves the *1D conservative Euler equations* for a smooth field. The gas dynamics is governed by a system of PDE

.. math::

   \frac{\partial }{\partial t} \begin{bmatrix}\rho \\ \rho v\\ E \end{bmatrix} + \frac{\partial }{\partial x} \begin{bmatrix}\rho v \\ \rho v^2 +p\\ v(E+p) \end{bmatrix} = 0

where the pressure :math:`p` is related to the conserved quantities through the equation of the state

.. math::

   p=(\gamma -1)(E-\frac{1}{2}\rho v^2).

* The problem is adapted from `this paper <https://www.proquest.com/openview/ef6ab9a87e7563ad18e56c2f95f624d8/1?pq-origsite=gscholar&cbl=2032364>`_

=======
This problem solves the *1D conservative Euler equations* for a smooth field.

* The problem is adapted from `this paper <https://www.proquest.com/openview/ef6ab9a87e7563ad18e56c2f95f624d8/1?pq-origsite=gscholar&cbl=2032364>`_

>>>>>>> cdd90a7b7ed9fb5a4ae7fb40b4ca9318198d3069
* Initial conditions in primitive variables:

  - :math:`\rho(x, 0) = 1 + 0.2 \sin(\pi x)`

  - :math:`u(x,0) = 1`

  - :math:`p(x,0) = 1`

  - These are used to create the initial conditions in conservative variables.
<<<<<<< HEAD

* Domain is :math:`[-1,1]` with periodic BC

* Analytical density as function of time :math:`t` is given as :math:`\rho(t) = 1 + 0.2\sin(\pi (x-t))`

=======

* Domain is :math:`[-1,1]` with periodic BC

* Analytical density as function of time :math:`t` is given as :math:`\rho(t) = 1 + 0.2\sin(\pi (x-t))`

>>>>>>> cdd90a7b7ed9fb5a4ae7fb40b4ca9318198d3069
* Typically, integration is performed over :math:`t \in (0, 2)`


Mesh
----

.. code-block:: shell

   python3 pressio-demoapps/meshing_scripts/create_full_mesh_for.py \
          --problem euler1dsmooth_s<stencilSize> -n <N> --outDir <destination-path>

where ``N`` is the number of cells you want and ``<stencilSize> = 3 or 5 or 7``,
and ``<destination-path>`` is where you want the mesh files to be generated.

C++ synopsis
------------

.. code-block:: c++

   #include "pressiodemoapps/euler1d.hpp"

   namespace pda     = pressiodemoapps;
   const auto probId = pda::Euler1d::PeriodicSmooth;
   const auto scheme = pda::InviscidFluxReconstruction::FirstOder; //or Weno3, Weno5
   auto problem      = pda::create_problem_eigen(meshObj, probId, scheme);

Python synopsis
---------------

.. code-block:: py

   import pressiodemoapps as pda

   probId  = pda.Euler1d.PeriodicSmooth
   scheme  = pda.InviscidFluxReconstruction.FirstOrder # or Weno3, Weno5
   problem = pda.create_problem(meshObj, probId, scheme)
